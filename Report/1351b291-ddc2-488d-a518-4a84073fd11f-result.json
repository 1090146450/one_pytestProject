{"name": "test_login[driver7]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 10102 == 1010", "trace": "self = <GuestTest.testCase.test_api.Test_Url object at 0x000001A5656B1760>\ndriver = {'check': {'data': [], 'message': 'username or passwrord is None', 'status': 1010}, 'data': {'password': 'root'}, 'method': 'post', 'title': '少参', ...}\n\n    @pytest.mark.parametrize(\"driver\", yaml_data)\n    def test_login(self, driver):\n        \"\"\"登录接口测试\"\"\"\n        # 添加LOG\n        title = driver[\"title\"]\n        Test_Url.logger.info(f\"开始执行用例,标题:{title}\")\n        Test_Url.logger.info(\"读取用例中数据\")\n        guest_url = Consts.all_url + driver[\"url\"]  # 获取URL\n        Test_Url.logger.info(\"URL读取成功,URL:\" + str(guest_url))\n        data = driver[\"data\"]  # 获取数据驱动中的数据\n        Test_Url.logger.info(f\"接口传值:{data}\")\n        method = driver[\"method\"]  # 获取请求方式\n        Test_Url.logger.info(f\"请求方式:{method}\")\n        Test_Url.logger.info(f\"开始请求接口\")\n        try:\n            guest_data = Request.RequestUtil().all_send_request(method, guest_url, data=data)  # 开始请求接口\n            Test_Url.logger.info(f\"接口请求成功\")\n        except Exception as e:\n            Test_Url.logger.debug(f\"接口请求失败,失败原因如下:{e}\\n\")\n        guest_json = guest_data.json()  # 获取返回的JSON\n        Test_Url.logger.info(f\"请求返回数据:{guest_json}\")\n        for k, v in driver[\"check\"].items():\n            Test_Url.logger.info(f\"开始校验数据\")\n            try:\n                assert guest_json[k] == v  # 对返回数据和数据驱动中数据进行校验\n                Test_Url.logger.info(f\"数据校验完成\")\n            except Exception as e:\n                Test_Url.logger.debug(f\"校验失败:{e}\")\n>               raise e\n\ntestCase\\test_api.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <GuestTest.testCase.test_api.Test_Url object at 0x000001A5656B1760>\ndriver = {'check': {'data': [], 'message': 'username or passwrord is None', 'status': 1010}, 'data': {'password': 'root'}, 'method': 'post', 'title': '少参', ...}\n\n    @pytest.mark.parametrize(\"driver\", yaml_data)\n    def test_login(self, driver):\n        \"\"\"登录接口测试\"\"\"\n        # 添加LOG\n        title = driver[\"title\"]\n        Test_Url.logger.info(f\"开始执行用例,标题:{title}\")\n        Test_Url.logger.info(\"读取用例中数据\")\n        guest_url = Consts.all_url + driver[\"url\"]  # 获取URL\n        Test_Url.logger.info(\"URL读取成功,URL:\" + str(guest_url))\n        data = driver[\"data\"]  # 获取数据驱动中的数据\n        Test_Url.logger.info(f\"接口传值:{data}\")\n        method = driver[\"method\"]  # 获取请求方式\n        Test_Url.logger.info(f\"请求方式:{method}\")\n        Test_Url.logger.info(f\"开始请求接口\")\n        try:\n            guest_data = Request.RequestUtil().all_send_request(method, guest_url, data=data)  # 开始请求接口\n            Test_Url.logger.info(f\"接口请求成功\")\n        except Exception as e:\n            Test_Url.logger.debug(f\"接口请求失败,失败原因如下:{e}\\n\")\n        guest_json = guest_data.json()  # 获取返回的JSON\n        Test_Url.logger.info(f\"请求返回数据:{guest_json}\")\n        for k, v in driver[\"check\"].items():\n            Test_Url.logger.info(f\"开始校验数据\")\n            try:\n>               assert guest_json[k] == v  # 对返回数据和数据驱动中数据进行校验\nE               assert 10102 == 1010\n\ntestCase\\test_api.py:40: AssertionError"}, "description": "登录接口测试", "parameters": [{"name": "driver", "value": "{'title': '少参', 'url': 'api/login', 'method': 'post', 'data': {'password': 'root'}, 'check': {'status': 1010, 'message': 'username or passwrord is None', 'data': []}}"}], "start": 1674036915244, "stop": 1674036915260, "uuid": "27c8f96f-08aa-4b9d-8ced-f60123e1d2a7", "historyId": "4b49fd124f9a9bca37e019b4cd9ed46b", "testCaseId": "6848161d12060c7245eec5b2f64d6a93", "fullName": "testCase.test_api.Test_Url#test_login", "labels": [{"name": "parentSuite", "value": "testCase"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "Test_Url"}, {"name": "host", "value": "USER-20220728GX"}, {"name": "thread", "value": "15024-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCase.test_api"}]}